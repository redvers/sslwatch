require Logger
defmodule OID do
def txt2oid("dhKeyAgreement") do  {1,2,840,113549,1,3,1} end
def txt2oid("pkcs-3") do  {1,2,840,113549,1,3} end
def txt2oid("id-sha512") do  {2,16,840,1,101,3,4,2,3} end
def txt2oid("id-sha384") do  {2,16,840,1,101,3,4,2,2} end
def txt2oid("id-sha256") do  {2,16,840,1,101,3,4,2,1} end
def txt2oid("id-sha224") do  {2,16,840,1,101,3,4,2,4} end
def txt2oid("id-mgf1") do  {1,2,840,113549,1,1,8} end
def txt2oid("id-hmacWithSHA512") do  {1,2,840,113549,2,11} end
def txt2oid("id-hmacWithSHA384") do  {1,2,840,113549,2,10} end
def txt2oid("id-hmacWithSHA256") do  {1,2,840,113549,2,9} end
def txt2oid("id-hmacWithSHA224") do  {1,2,840,113549,2,8} end
def txt2oid("id-md5") do  {1,2,840,113549,2,5} end
def txt2oid("id-md2") do  {1,2,840,113549,2,2} end
def txt2oid("id-sha1") do  {1,3,14,3,2,26} end
def txt2oid("sha-1WithRSAEncryption") do  {1,3,14,3,2,29} end
def txt2oid("sha224WithRSAEncryption") do  {1,2,840,113549,1,1,14} end
def txt2oid("sha512WithRSAEncryption") do  {1,2,840,113549,1,1,13} end
def txt2oid("sha384WithRSAEncryption") do  {1,2,840,113549,1,1,12} end
def txt2oid("sha256WithRSAEncryption") do  {1,2,840,113549,1,1,11} end
def txt2oid("sha1WithRSAEncryption") do  {1,2,840,113549,1,1,5} end
def txt2oid("md5WithRSAEncryption") do  {1,2,840,113549,1,1,4} end
def txt2oid("md2WithRSAEncryption") do  {1,2,840,113549,1,1,2} end
def txt2oid("id-RSASSA-PSS") do  {1,2,840,113549,1,1,10} end
def txt2oid("id-pSpecified") do  {1,2,840,113549,1,1,9} end
def txt2oid("id-RSAES-OAEP") do  {1,2,840,113549,1,1,7} end
def txt2oid("rsaEncryption") do  {1,2,840,113549,1,1,1} end
def txt2oid("pkcs-1") do  {1,2,840,113549,1,1} end
def txt2oid("sect571r1") do  {1,3,132,0,39} end
def txt2oid("sect571k1") do  {1,3,132,0,38} end
def txt2oid("sect409r1") do  {1,3,132,0,37} end
def txt2oid("sect409k1") do  {1,3,132,0,36} end
def txt2oid("secp521r1") do  {1,3,132,0,35} end
def txt2oid("secp384r1") do  {1,3,132,0,34} end
def txt2oid("secp224r1") do  {1,3,132,0,33} end
def txt2oid("secp224k1") do  {1,3,132,0,32} end
def txt2oid("secp192k1") do  {1,3,132,0,31} end
def txt2oid("secp160r2") do  {1,3,132,0,30} end
def txt2oid("secp128r2") do  {1,3,132,0,29} end
def txt2oid("secp128r1") do  {1,3,132,0,28} end
def txt2oid("sect233r1") do  {1,3,132,0,27} end
def txt2oid("sect233k1") do  {1,3,132,0,26} end
def txt2oid("sect193r2") do  {1,3,132,0,25} end
def txt2oid("sect193r1") do  {1,3,132,0,24} end
def txt2oid("sect131r2") do  {1,3,132,0,23} end
def txt2oid("sect131r1") do  {1,3,132,0,22} end
def txt2oid("sect283r1") do  {1,3,132,0,17} end
def txt2oid("sect283k1") do  {1,3,132,0,16} end
def txt2oid("sect163r2") do  {1,3,132,0,15} end
def txt2oid("secp256k1") do  {1,3,132,0,10} end
def txt2oid("secp160k1") do  {1,3,132,0,9} end
def txt2oid("secp160r1") do  {1,3,132,0,8} end
def txt2oid("secp112r2") do  {1,3,132,0,7} end
def txt2oid("secp112r1") do  {1,3,132,0,6} end
def txt2oid("sect113r2") do  {1,3,132,0,5} end
def txt2oid("sect113r1") do  {1,3,132,0,4} end
def txt2oid("sect239k1") do  {1,3,132,0,3} end
def txt2oid("sect163r1") do  {1,3,132,0,2} end
def txt2oid("sect163k1") do  {1,3,132,0,1} end
def txt2oid("secp256r1") do  {1,2,840,10045,3,1,7} end
def txt2oid("secp192r1") do  {1,2,840,10045,3,1,1} end
def txt2oid("ellipticCurve") do  {1,3,132,0} end
def txt2oid("certicom-arc") do  {1,3,132} end
def txt2oid("id-ecPublicKey") do  {1,2,840,10045,2,1} end
def txt2oid("id-publicKeyType") do  {1,2,840,10045,2} end
def txt2oid("ppBasis") do  {1,2,840,10045,1,2,3,3} end
def txt2oid("tpBasis") do  {1,2,840,10045,1,2,3,2} end
def txt2oid("gnBasis") do  {1,2,840,10045,1,2,3,1} end
def txt2oid("id-characteristic-two-basis") do  {1,2,840,10045,1,2,3} end
def txt2oid("characteristic-two-field") do  {1,2,840,10045,1,2} end
def txt2oid("prime-field") do  {1,2,840,10045,1,1} end
def txt2oid("id-fieldType") do  {1,2,840,10045,1} end
def txt2oid("ecdsa-with-SHA512") do  {1,2,840,10045,4,3,4} end
def txt2oid("ecdsa-with-SHA384") do  {1,2,840,10045,4,3,3} end
def txt2oid("ecdsa-with-SHA256") do  {1,2,840,10045,4,3,2} end
def txt2oid("ecdsa-with-SHA224") do  {1,2,840,10045,4,3,1} end
def txt2oid("ecdsa-with-SHA2") do  {1,2,840,10045,4,3} end
def txt2oid("ecdsa-with-SHA1") do  {1,2,840,10045,4,1} end
def txt2oid("id-ecSigType") do  {1,2,840,10045,4} end
def txt2oid("ansi-X9-62") do  {1,2,840,10045} end
def txt2oid("id-keyExchangeAlgorithm") do  {2,16,840,1,101,2,1,1,22} end
def txt2oid("dhpublicnumber") do  {1,2,840,10046,2,1} end
def txt2oid("id-dsaWithSHA1") do  {1,3,14,3,2,27} end
def txt2oid("id-dsa-with-sha1") do  {1,2,840,10040,4,3} end
def txt2oid("id-dsa") do  {1,2,840,10040,4,1} end
def txt2oid("id-at-clearance") do  {2,5,1,5,55} end
def txt2oid("id-at-role") do  {2,5,4,72} end
def txt2oid("id-aca-encAttrs") do  {1,3,6,1,5,5,7,10,6} end
def txt2oid("id-aca-group") do  {1,3,6,1,5,5,7,10,4} end
def txt2oid("id-aca-chargingIdentity") do  {1,3,6,1,5,5,7,10,3} end
def txt2oid("id-aca-accessIdentity") do  {1,3,6,1,5,5,7,10,2} end
def txt2oid("id-aca-authenticationInfo") do  {1,3,6,1,5,5,7,10,1} end
def txt2oid("id-aca") do  {1,3,6,1,5,5,7,10} end
def txt2oid("id-ce-targetInformation") do  {2,5,29,55} end
def txt2oid("id-pe-ac-proxying") do  {1,3,6,1,5,5,7,1,10} end
def txt2oid("id-pe-aaControls") do  {1,3,6,1,5,5,7,1,6} end
def txt2oid("id-pe-ac-auditIdentity") do  {1,3,6,1,5,5,7,1,4} end
def txt2oid("id-ce-invalidityDate") do  {2,5,29,24} end
def txt2oid("id-holdinstruction-reject") do  {2,2,840,10040,2,3} end
def txt2oid("id-holdinstruction-callissuer") do  {2,2,840,10040,2,2} end
def txt2oid("id-holdinstruction-none") do  {2,2,840,10040,2,1} end
def txt2oid("holdInstruction") do  {2,2,840,10040,2} end
def txt2oid("id-ce-holdInstructionCode") do  {2,5,29,23} end
def txt2oid("id-ce-certificateIssuer") do  {2,5,29,29} end
def txt2oid("id-ce-cRLReasons") do  {2,5,29,21} end
def txt2oid("id-ce-deltaCRLIndicator") do  {2,5,29,27} end
def txt2oid("id-ce-issuingDistributionPoint") do  {2,5,29,28} end
def txt2oid("id-ce-cRLNumber") do  {2,5,29,20} end
def txt2oid("id-pe-subjectInfoAccess") do  {1,3,6,1,5,5,7,1,11} end
def txt2oid("id-pe-authorityInfoAccess") do  {1,3,6,1,5,5,7,1,1} end
def txt2oid("id-ce-freshestCRL") do  {2,5,29,46} end
def txt2oid("id-ce-inhibitAnyPolicy") do  {2,5,29,54} end
def txt2oid("id-kp-OCSPSigning") do  {1,3,6,1,5,5,7,3,9} end
def txt2oid("id-kp-timeStamping") do  {1,3,6,1,5,5,7,3,8} end
def txt2oid("id-kp-emailProtection") do  {1,3,6,1,5,5,7,3,4} end
def txt2oid("id-kp-codeSigning") do  {1,3,6,1,5,5,7,3,3} end
def txt2oid("id-kp-clientAuth") do  {1,3,6,1,5,5,7,3,2} end
def txt2oid("id-kp-serverAuth") do  {1,3,6,1,5,5,7,3,1} end
def txt2oid("anyExtendedKeyUsage") do  {2,5,29,37,0} end
def txt2oid("id-ce-extKeyUsage") do  {2,5,29,37} end
def txt2oid("id-ce-cRLDistributionPoints") do  {2,5,29,31} end
def txt2oid("id-ce-policyConstraints") do  {2,5,29,36} end
def txt2oid("id-ce-nameConstraints") do  {2,5,29,30} end
def txt2oid("id-ce-basicConstraints") do  {2,5,29,19} end
def txt2oid("id-ce-subjectDirectoryAttributes") do  {2,5,29,9} end
def txt2oid("id-ce-issuerAltName") do  {2,5,29,18} end
def txt2oid("id-ce-subjectAltName") do  {2,5,29,17} end
def txt2oid("id-ce-policyMappings") do  {2,5,29,33} end
def txt2oid("anyPolicy") do  {2,5,29,32,0} end
def txt2oid("id-ce-certificatePolicies") do  {2,5,29,32} end
def txt2oid("id-ce-privateKeyUsagePeriod") do  {2,5,29,16} end
def txt2oid("id-ce-keyUsage") do  {2,5,29,15} end
def txt2oid("id-ce-subjectKeyIdentifier") do  {2,5,29,14} end
def txt2oid("id-ce-authorityKeyIdentifier") do  {2,5,29,35} end
def txt2oid("id-ce") do  {2,5,29} end
def txt2oid("id-extensionReq") do  {2,16,840,1,113733,1,9,8} end
def txt2oid("id-transId") do  {2,16,840,1,113733,1,9,7} end
def txt2oid("id-recipientNonce") do  {2,16,840,1,113733,1,9,6} end
def txt2oid("id-senderNonce") do  {2,16,840,1,113733,1,9,5} end
def txt2oid("id-failInfo") do  {2,16,840,1,113733,1,9,4} end
def txt2oid("id-pkiStatus") do  {2,16,840,1,113733,1,9,3} end
def txt2oid("id-messageType") do  {2,16,840,1,113733,1,9,2} end
def txt2oid("id-attributes") do  {2,16,840,1,113733,1,9} end
def txt2oid("id-pki") do  {2,16,840,1,113733,1} end
def txt2oid("id-VeriSign") do  {2,16,840,1,113733} end
def txt2oid("encryptedData") do  {1,2,840,113549,1,7,6} end
def txt2oid("digestedData") do  {1,2,840,113549,1,7,5} end
def txt2oid("signedAndEnvelopedData") do  {1,2,840,113549,1,7,4} end
def txt2oid("envelopedData") do  {1,2,840,113549,1,7,3} end
def txt2oid("signedData") do  {1,2,840,113549,1,7,2} end
def txt2oid("data") do  {1,2,840,113549,1,7,1} end
def txt2oid("pkcs-7") do  {1,2,840,113549,1,7} end
def txt2oid("pkcs-9-at-counterSignature") do  {1,2,840,113549,1,9,6} end
def txt2oid("pkcs-9-at-signingTime") do  {1,2,840,113549,1,9,5} end
def txt2oid("pkcs-9-at-messageDigest") do  {1,2,840,113549,1,9,4} end
def txt2oid("pkcs-9-at-contentType") do  {1,2,840,113549,1,9,3} end
def txt2oid("pkcs-9") do  {1,2,840,113549,1,9} end
def txt2oid("pkcs-9-at-extensionRequest") do  {1,2,840,113549,1,9,14} end
def txt2oid("pkcs-9-at-challengePassword") do  {1,2,840,113549,1,9,7} end
def txt2oid("brainpoolP512t1") do  {1,3,36,3,3,2,8,1,1,14} end
def txt2oid("brainpoolP512r1") do  {1,3,36,3,3,2,8,1,1,13} end
def txt2oid("brainpoolP384t1") do  {1,3,36,3,3,2,8,1,1,12} end
def txt2oid("brainpoolP384r1") do  {1,3,36,3,3,2,8,1,1,11} end
def txt2oid("brainpoolP320t1") do  {1,3,36,3,3,2,8,1,1,10} end
def txt2oid("brainpoolP320r1") do  {1,3,36,3,3,2,8,1,1,9} end
def txt2oid("brainpoolP256t1") do  {1,3,36,3,3,2,8,1,1,8} end
def txt2oid("brainpoolP256r1") do  {1,3,36,3,3,2,8,1,1,7} end
def txt2oid("brainpoolP224t1") do  {1,3,36,3,3,2,8,1,1,6} end
def txt2oid("brainpoolP224r1") do  {1,3,36,3,3,2,8,1,1,5} end
def txt2oid("brainpoolP192t1") do  {1,3,36,3,3,2,8,1,1,4} end
def txt2oid("brainpoolP192r1") do  {1,3,36,3,3,2,8,1,1,3} end
def txt2oid("brainpoolP160t1") do  {1,3,36,3,3,2,8,1,1,2} end
def txt2oid("brainpoolP160r1") do  {1,3,36,3,3,2,8,1,1,1} end
def txt2oid("versionOne") do  {1,3,36,3,3,2,8,1,1} end
def txt2oid("ellipticCurveRFC5639") do  {1,3,36,3,3,2,8,1} end
def txt2oid("ecStdCurvesAndGeneration") do  {1,3,36,3,3,2,8} end
def txt2oid("ub-x121-address-length") do  16 end
def txt2oid("ub-unformatted-address-length") do  180 end
def txt2oid("ub-terminal-id-length") do  24 end
def txt2oid("ub-surname-length") do  40 end
def txt2oid("ub-pseudonym") do  128 end
def txt2oid("ub-postal-code-length") do  16 end
def txt2oid("ub-pds-physical-address-lines") do  6 end
def txt2oid("ub-pds-parameter-length") do  30 end
def txt2oid("ub-pds-name-length") do  16 end
def txt2oid("ub-organizational-units") do  4 end
def txt2oid("ub-organizational-unit-name-length") do  32 end
def txt2oid("ub-organization-name-length") do  64 end
def txt2oid("ub-numeric-user-id-length") do  32 end
def txt2oid("ub-integer-options") do  256 end
def txt2oid("ub-initials-length") do  5 end
def txt2oid("ub-given-name-length") do  16 end
def txt2oid("ub-generation-qualifier-length") do  3 end
def txt2oid("ub-e163-4-sub-address-length") do  40 end
def txt2oid("ub-e163-4-number-length") do  15 end
def txt2oid("ub-extension-attributes") do  256 end
def txt2oid("ub-domain-name-length") do  16 end
def txt2oid("ub-domain-defined-attribute-value-length") do  128 end
def txt2oid("ub-domain-defined-attribute-type-length") do  8 end
def txt2oid("ub-domain-defined-attributes") do  4 end
def txt2oid("ub-country-name-numeric-length") do  3 end
def txt2oid("ub-country-name-alpha-length") do  2 end
def txt2oid("ub-common-name-length") do  64 end
def txt2oid("ub-emailaddress-length") do  255 end
def txt2oid("ub-match") do  128 end
def txt2oid("ub-serial-number") do  64 end
def txt2oid("ub-title") do  64 end
def txt2oid("ub-organizational-unit-name") do  64 end
def txt2oid("ub-organization-name") do  64 end
def txt2oid("ub-state-name") do  128 end
def txt2oid("ub-locality-name") do  128 end
def txt2oid("ub-common-name") do  64 end
def txt2oid("ub-name") do  32768 end
def txt2oid("teletex-domain-defined-attributes") do  6 end
def txt2oid("terminal-type") do  23 end
def txt2oid("extended-network-address") do  22 end
def txt2oid("local-postal-attributes") do  21 end
def txt2oid("unique-postal-name") do  20 end
def txt2oid("poste-restante-address") do  19 end
def txt2oid("post-office-box-address") do  18 end
def txt2oid("street-address") do  17 end
def txt2oid("unformatted-postal-address") do  16 end
def txt2oid("extension-physical-delivery-address-components") do  15 end
def txt2oid("physical-delivery-organization-name") do  14 end
def txt2oid("physical-delivery-personal-name") do  13 end
def txt2oid("extension-OR-address-components") do  12 end
def txt2oid("physical-delivery-office-number") do  11 end
def txt2oid("physical-delivery-office-name") do  10 end
def txt2oid("postal-code") do  9 end
def txt2oid("physical-delivery-country-name") do  8 end
def txt2oid("pds-name") do  7 end
def txt2oid("teletex-organizational-unit-names") do  5 end
def txt2oid("teletex-personal-name") do  4 end
def txt2oid("teletex-organization-name") do  3 end
def txt2oid("teletex-common-name") do  2 end
def txt2oid("common-name") do  1 end
def txt2oid("id-emailAddress") do  {1,2,840,113549,1,9,1} end
def txt2oid("id-domainComponent") do  {0,9,2342,19200300,100,1,25} end
def txt2oid("id-at-pseudonym") do  {2,5,4,65} end
def txt2oid("id-at-serialNumber") do  {2,5,4,5} end
def txt2oid("id-at-countryName") do  {2,5,4,6} end
def txt2oid("id-at-dnQualifier") do  {2,5,4,46} end
def txt2oid("id-at-title") do  {2,5,4,12} end
def txt2oid("id-at-organizationalUnitName") do  {2,5,4,11} end
def txt2oid("id-at-organizationName") do  {2,5,4,10} end
def txt2oid("id-at-stateOrProvinceName") do  {2,5,4,8} end
def txt2oid("id-at-localityName") do  {2,5,4,7} end
def txt2oid("id-at-commonName") do  {2,5,4,3} end
def txt2oid("id-at-generationQualifier") do  {2,5,4,44} end
def txt2oid("id-at-initials") do  {2,5,4,43} end
def txt2oid("id-at-givenName") do  {2,5,4,42} end
def txt2oid("id-at-surname") do  {2,5,4,4} end
def txt2oid("id-at-name") do  {2,5,4,41} end
def txt2oid("id-at") do  {2,5,4} end
def txt2oid("id-ad-caRepository") do  {1,3,6,1,5,5,7,48,5} end
def txt2oid("id-ad-timeStamping") do  {1,3,6,1,5,5,7,48,3} end
def txt2oid("id-ad-caIssuers") do  {1,3,6,1,5,5,7,48,2} end
def txt2oid("id-ad-ocsp") do  {1,3,6,1,5,5,7,48,1} end
def txt2oid("id-qt-unotice") do  {1,3,6,1,5,5,7,2,2} end
def txt2oid("id-qt-cps") do  {1,3,6,1,5,5,7,2,1} end
def txt2oid("id-ad") do  {1,3,6,1,5,5,7,48} end
def txt2oid("id-kp") do  {1,3,6,1,5,5,7,3} end
def txt2oid("id-qt") do  {1,3,6,1,5,5,7,2} end
def txt2oid("id-pe") do  {1,3,6,1,5,5,7,1} end
def txt2oid("id-pkix") do  {1,3,6,1,5,5,7} end
def txt2oid(unknown) do Logger.debug("Unknown request for oid " <> inspect unknown) ; {} end
def oid2txt({1,2,840,113549,1,3,1}) do "dhKeyAgreement" end
def oid2txt({1,2,840,113549,1,3}) do "pkcs-3" end
def oid2txt({2,16,840,1,101,3,4,2,3}) do "id-sha512" end
def oid2txt({2,16,840,1,101,3,4,2,2}) do "id-sha384" end
def oid2txt({2,16,840,1,101,3,4,2,1}) do "id-sha256" end
def oid2txt({2,16,840,1,101,3,4,2,4}) do "id-sha224" end
def oid2txt({1,2,840,113549,1,1,8}) do "id-mgf1" end
def oid2txt({1,2,840,113549,2,11}) do "id-hmacWithSHA512" end
def oid2txt({1,2,840,113549,2,10}) do "id-hmacWithSHA384" end
def oid2txt({1,2,840,113549,2,9}) do "id-hmacWithSHA256" end
def oid2txt({1,2,840,113549,2,8}) do "id-hmacWithSHA224" end
def oid2txt({1,2,840,113549,2,5}) do "id-md5" end
def oid2txt({1,2,840,113549,2,2}) do "id-md2" end
def oid2txt({1,3,14,3,2,26}) do "id-sha1" end
def oid2txt({1,3,14,3,2,29}) do "sha-1WithRSAEncryption" end
def oid2txt({1,2,840,113549,1,1,14}) do "sha224WithRSAEncryption" end
def oid2txt({1,2,840,113549,1,1,13}) do "sha512WithRSAEncryption" end
def oid2txt({1,2,840,113549,1,1,12}) do "sha384WithRSAEncryption" end
def oid2txt({1,2,840,113549,1,1,11}) do "sha256WithRSAEncryption" end
def oid2txt({1,2,840,113549,1,1,5}) do "sha1WithRSAEncryption" end
def oid2txt({1,2,840,113549,1,1,4}) do "md5WithRSAEncryption" end
def oid2txt({1,2,840,113549,1,1,2}) do "md2WithRSAEncryption" end
def oid2txt({1,2,840,113549,1,1,10}) do "id-RSASSA-PSS" end
def oid2txt({1,2,840,113549,1,1,9}) do "id-pSpecified" end
def oid2txt({1,2,840,113549,1,1,7}) do "id-RSAES-OAEP" end
def oid2txt({1,2,840,113549,1,1,1}) do "rsaEncryption" end
def oid2txt({1,2,840,113549,1,1}) do "pkcs-1" end
def oid2txt({1,3,132,0,39}) do "sect571r1" end
def oid2txt({1,3,132,0,38}) do "sect571k1" end
def oid2txt({1,3,132,0,37}) do "sect409r1" end
def oid2txt({1,3,132,0,36}) do "sect409k1" end
def oid2txt({1,3,132,0,35}) do "secp521r1" end
def oid2txt({1,3,132,0,34}) do "secp384r1" end
def oid2txt({1,3,132,0,33}) do "secp224r1" end
def oid2txt({1,3,132,0,32}) do "secp224k1" end
def oid2txt({1,3,132,0,31}) do "secp192k1" end
def oid2txt({1,3,132,0,30}) do "secp160r2" end
def oid2txt({1,3,132,0,29}) do "secp128r2" end
def oid2txt({1,3,132,0,28}) do "secp128r1" end
def oid2txt({1,3,132,0,27}) do "sect233r1" end
def oid2txt({1,3,132,0,26}) do "sect233k1" end
def oid2txt({1,3,132,0,25}) do "sect193r2" end
def oid2txt({1,3,132,0,24}) do "sect193r1" end
def oid2txt({1,3,132,0,23}) do "sect131r2" end
def oid2txt({1,3,132,0,22}) do "sect131r1" end
def oid2txt({1,3,132,0,17}) do "sect283r1" end
def oid2txt({1,3,132,0,16}) do "sect283k1" end
def oid2txt({1,3,132,0,15}) do "sect163r2" end
def oid2txt({1,3,132,0,10}) do "secp256k1" end
def oid2txt({1,3,132,0,9}) do "secp160k1" end
def oid2txt({1,3,132,0,8}) do "secp160r1" end
def oid2txt({1,3,132,0,7}) do "secp112r2" end
def oid2txt({1,3,132,0,6}) do "secp112r1" end
def oid2txt({1,3,132,0,5}) do "sect113r2" end
def oid2txt({1,3,132,0,4}) do "sect113r1" end
def oid2txt({1,3,132,0,3}) do "sect239k1" end
def oid2txt({1,3,132,0,2}) do "sect163r1" end
def oid2txt({1,3,132,0,1}) do "sect163k1" end
def oid2txt({1,2,840,10045,3,1,7}) do "secp256r1" end
def oid2txt({1,2,840,10045,3,1,1}) do "secp192r1" end
def oid2txt({1,3,132,0}) do "ellipticCurve" end
def oid2txt({1,3,132}) do "certicom-arc" end
def oid2txt({1,2,840,10045,2,1}) do "id-ecPublicKey" end
def oid2txt({1,2,840,10045,2}) do "id-publicKeyType" end
def oid2txt({1,2,840,10045,1,2,3,3}) do "ppBasis" end
def oid2txt({1,2,840,10045,1,2,3,2}) do "tpBasis" end
def oid2txt({1,2,840,10045,1,2,3,1}) do "gnBasis" end
def oid2txt({1,2,840,10045,1,2,3}) do "id-characteristic-two-basis" end
def oid2txt({1,2,840,10045,1,2}) do "characteristic-two-field" end
def oid2txt({1,2,840,10045,1,1}) do "prime-field" end
def oid2txt({1,2,840,10045,1}) do "id-fieldType" end
def oid2txt({1,2,840,10045,4,3,4}) do "ecdsa-with-SHA512" end
def oid2txt({1,2,840,10045,4,3,3}) do "ecdsa-with-SHA384" end
def oid2txt({1,2,840,10045,4,3,2}) do "ecdsa-with-SHA256" end
def oid2txt({1,2,840,10045,4,3,1}) do "ecdsa-with-SHA224" end
def oid2txt({1,2,840,10045,4,3}) do "ecdsa-with-SHA2" end
def oid2txt({1,2,840,10045,4,1}) do "ecdsa-with-SHA1" end
def oid2txt({1,2,840,10045,4}) do "id-ecSigType" end
def oid2txt({1,2,840,10045}) do "ansi-X9-62" end
def oid2txt({2,16,840,1,101,2,1,1,22}) do "id-keyExchangeAlgorithm" end
def oid2txt({1,2,840,10046,2,1}) do "dhpublicnumber" end
def oid2txt({1,3,14,3,2,27}) do "id-dsaWithSHA1" end
def oid2txt({1,2,840,10040,4,3}) do "id-dsa-with-sha1" end
def oid2txt({1,2,840,10040,4,1}) do "id-dsa" end
def oid2txt({2,5,1,5,55}) do "id-at-clearance" end
def oid2txt({2,5,4,72}) do "id-at-role" end
def oid2txt({1,3,6,1,5,5,7,10,6}) do "id-aca-encAttrs" end
def oid2txt({1,3,6,1,5,5,7,10,4}) do "id-aca-group" end
def oid2txt({1,3,6,1,5,5,7,10,3}) do "id-aca-chargingIdentity" end
def oid2txt({1,3,6,1,5,5,7,10,2}) do "id-aca-accessIdentity" end
def oid2txt({1,3,6,1,5,5,7,10,1}) do "id-aca-authenticationInfo" end
def oid2txt({1,3,6,1,5,5,7,10}) do "id-aca" end
def oid2txt({2,5,29,55}) do "id-ce-targetInformation" end
def oid2txt({1,3,6,1,5,5,7,1,10}) do "id-pe-ac-proxying" end
def oid2txt({1,3,6,1,5,5,7,1,6}) do "id-pe-aaControls" end
def oid2txt({1,3,6,1,5,5,7,1,4}) do "id-pe-ac-auditIdentity" end
def oid2txt({2,5,29,24}) do "id-ce-invalidityDate" end
def oid2txt({2,2,840,10040,2,3}) do "id-holdinstruction-reject" end
def oid2txt({2,2,840,10040,2,2}) do "id-holdinstruction-callissuer" end
def oid2txt({2,2,840,10040,2,1}) do "id-holdinstruction-none" end
def oid2txt({2,2,840,10040,2}) do "holdInstruction" end
def oid2txt({2,5,29,23}) do "id-ce-holdInstructionCode" end
def oid2txt({2,5,29,29}) do "id-ce-certificateIssuer" end
def oid2txt({2,5,29,21}) do "id-ce-cRLReasons" end
def oid2txt({2,5,29,27}) do "id-ce-deltaCRLIndicator" end
def oid2txt({2,5,29,28}) do "id-ce-issuingDistributionPoint" end
def oid2txt({2,5,29,20}) do "id-ce-cRLNumber" end
def oid2txt({1,3,6,1,5,5,7,1,11}) do "id-pe-subjectInfoAccess" end
def oid2txt({1,3,6,1,5,5,7,1,1}) do "id-pe-authorityInfoAccess" end
def oid2txt({2,5,29,46}) do "id-ce-freshestCRL" end
def oid2txt({2,5,29,54}) do "id-ce-inhibitAnyPolicy" end
def oid2txt({1,3,6,1,5,5,7,3,9}) do "id-kp-OCSPSigning" end
def oid2txt({1,3,6,1,5,5,7,3,8}) do "id-kp-timeStamping" end
def oid2txt({1,3,6,1,5,5,7,3,4}) do "id-kp-emailProtection" end
def oid2txt({1,3,6,1,5,5,7,3,3}) do "id-kp-codeSigning" end
def oid2txt({1,3,6,1,5,5,7,3,2}) do "id-kp-clientAuth" end
def oid2txt({1,3,6,1,5,5,7,3,1}) do "id-kp-serverAuth" end
def oid2txt({2,5,29,37,0}) do "anyExtendedKeyUsage" end
def oid2txt({2,5,29,37}) do "id-ce-extKeyUsage" end
def oid2txt({2,5,29,31}) do "id-ce-cRLDistributionPoints" end
def oid2txt({2,5,29,36}) do "id-ce-policyConstraints" end
def oid2txt({2,5,29,30}) do "id-ce-nameConstraints" end
def oid2txt({2,5,29,19}) do "id-ce-basicConstraints" end
def oid2txt({2,5,29,9}) do "id-ce-subjectDirectoryAttributes" end
def oid2txt({2,5,29,18}) do "id-ce-issuerAltName" end
def oid2txt({2,5,29,17}) do "id-ce-subjectAltName" end
def oid2txt({2,5,29,33}) do "id-ce-policyMappings" end
def oid2txt({2,5,29,32,0}) do "anyPolicy" end
def oid2txt({2,5,29,32}) do "id-ce-certificatePolicies" end
def oid2txt({2,5,29,16}) do "id-ce-privateKeyUsagePeriod" end
def oid2txt({2,5,29,15}) do "id-ce-keyUsage" end
def oid2txt({2,5,29,14}) do "id-ce-subjectKeyIdentifier" end
def oid2txt({2,5,29,35}) do "id-ce-authorityKeyIdentifier" end
def oid2txt({2,5,29}) do "id-ce" end
def oid2txt({2,16,840,1,113733,1,9,8}) do "id-extensionReq" end
def oid2txt({2,16,840,1,113733,1,9,7}) do "id-transId" end
def oid2txt({2,16,840,1,113733,1,9,6}) do "id-recipientNonce" end
def oid2txt({2,16,840,1,113733,1,9,5}) do "id-senderNonce" end
def oid2txt({2,16,840,1,113733,1,9,4}) do "id-failInfo" end
def oid2txt({2,16,840,1,113733,1,9,3}) do "id-pkiStatus" end
def oid2txt({2,16,840,1,113733,1,9,2}) do "id-messageType" end
def oid2txt({2,16,840,1,113733,1,9}) do "id-attributes" end
def oid2txt({2,16,840,1,113733,1}) do "id-pki" end
def oid2txt({2,16,840,1,113733}) do "id-VeriSign" end
def oid2txt({1,2,840,113549,1,7,6}) do "encryptedData" end
def oid2txt({1,2,840,113549,1,7,5}) do "digestedData" end
def oid2txt({1,2,840,113549,1,7,4}) do "signedAndEnvelopedData" end
def oid2txt({1,2,840,113549,1,7,3}) do "envelopedData" end
def oid2txt({1,2,840,113549,1,7,2}) do "signedData" end
def oid2txt({1,2,840,113549,1,7,1}) do "data" end
def oid2txt({1,2,840,113549,1,7}) do "pkcs-7" end
def oid2txt({1,2,840,113549,1,9,6}) do "pkcs-9-at-counterSignature" end
def oid2txt({1,2,840,113549,1,9,5}) do "pkcs-9-at-signingTime" end
def oid2txt({1,2,840,113549,1,9,4}) do "pkcs-9-at-messageDigest" end
def oid2txt({1,2,840,113549,1,9,3}) do "pkcs-9-at-contentType" end
def oid2txt({1,2,840,113549,1,9}) do "pkcs-9" end
def oid2txt({1,2,840,113549,1,9,14}) do "pkcs-9-at-extensionRequest" end
def oid2txt({1,2,840,113549,1,9,7}) do "pkcs-9-at-challengePassword" end
def oid2txt({1,3,36,3,3,2,8,1,1,14}) do "brainpoolP512t1" end
def oid2txt({1,3,36,3,3,2,8,1,1,13}) do "brainpoolP512r1" end
def oid2txt({1,3,36,3,3,2,8,1,1,12}) do "brainpoolP384t1" end
def oid2txt({1,3,36,3,3,2,8,1,1,11}) do "brainpoolP384r1" end
def oid2txt({1,3,36,3,3,2,8,1,1,10}) do "brainpoolP320t1" end
def oid2txt({1,3,36,3,3,2,8,1,1,9}) do "brainpoolP320r1" end
def oid2txt({1,3,36,3,3,2,8,1,1,8}) do "brainpoolP256t1" end
def oid2txt({1,3,36,3,3,2,8,1,1,7}) do "brainpoolP256r1" end
def oid2txt({1,3,36,3,3,2,8,1,1,6}) do "brainpoolP224t1" end
def oid2txt({1,3,36,3,3,2,8,1,1,5}) do "brainpoolP224r1" end
def oid2txt({1,3,36,3,3,2,8,1,1,4}) do "brainpoolP192t1" end
def oid2txt({1,3,36,3,3,2,8,1,1,3}) do "brainpoolP192r1" end
def oid2txt({1,3,36,3,3,2,8,1,1,2}) do "brainpoolP160t1" end
def oid2txt({1,3,36,3,3,2,8,1,1,1}) do "brainpoolP160r1" end
def oid2txt({1,3,36,3,3,2,8,1,1}) do "versionOne" end
def oid2txt({1,3,36,3,3,2,8,1}) do "ellipticCurveRFC5639" end
def oid2txt({1,3,36,3,3,2,8}) do "ecStdCurvesAndGeneration" end
def oid2txt({1,2,840,113549,1,9,1}) do "id-emailAddress" end
def oid2txt({0,9,2342,19200300,100,1,25}) do "id-domainComponent" end
def oid2txt({2,5,4,65}) do "id-at-pseudonym" end
def oid2txt({2,5,4,5}) do "id-at-serialNumber" end
def oid2txt({2,5,4,6}) do "id-at-countryName" end
def oid2txt({2,5,4,46}) do "id-at-dnQualifier" end
def oid2txt({2,5,4,12}) do "id-at-title" end
def oid2txt({2,5,4,11}) do "id-at-organizationalUnitName" end
def oid2txt({2,5,4,10}) do "id-at-organizationName" end
def oid2txt({2,5,4,8}) do "id-at-stateOrProvinceName" end
def oid2txt({2,5,4,7}) do "id-at-localityName" end
def oid2txt({2,5,4,3}) do "id-at-commonName" end
def oid2txt({2,5,4,44}) do "id-at-generationQualifier" end
def oid2txt({2,5,4,43}) do "id-at-initials" end
def oid2txt({2,5,4,42}) do "id-at-givenName" end
def oid2txt({2,5,4,4}) do "id-at-surname" end
def oid2txt({2,5,4,41}) do "id-at-name" end
def oid2txt({2,5,4}) do "id-at" end
def oid2txt({1,3,6,1,5,5,7,48,5}) do "id-ad-caRepository" end
def oid2txt({1,3,6,1,5,5,7,48,3}) do "id-ad-timeStamping" end
def oid2txt({1,3,6,1,5,5,7,48,2}) do "id-ad-caIssuers" end
def oid2txt({1,3,6,1,5,5,7,48,1}) do "id-ad-ocsp" end
def oid2txt({1,3,6,1,5,5,7,2,2}) do "id-qt-unotice" end
def oid2txt({1,3,6,1,5,5,7,2,1}) do "id-qt-cps" end
def oid2txt({1,3,6,1,5,5,7,48}) do "id-ad" end
def oid2txt({1,3,6,1,5,5,7,3}) do "id-kp" end
def oid2txt({1,3,6,1,5,5,7,2}) do "id-qt" end
def oid2txt({1,3,6,1,5,5,7,1}) do "id-pe" end
def oid2txt({1,3,6,1,5,5,7}) do "id-pkix" end
def oid2txt(unknown) do Logger.debug("Unknown oid " <> inspect unknown) ; "unknown" end
end
